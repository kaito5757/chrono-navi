# Alpine LinuxベースのNode.jsイメージをベースにする
# サイズが小さく、セキュリティが高い
FROM node:18-alpine AS base


# ビルダーイメージを作成する
FROM base AS builder

# apk updateを実行して、libc6-compatをインストールする
RUN apk update && apk add --no-cache libc6-compat

# pnpmをインストール
RUN npm install -g pnpm

ENV PNPM_HOME=/root/.local/share/pnpm
ENV PATH="$PNPM_HOME:$PATH"

# /appを作業ディレクトリに設定する
WORKDIR /app

COPY package.json ./
COPY pnpm-workspace.yaml ./

# turboをグローバルにインストールする
RUN pnpm -g add turbo
# 現在ディレクトリの内容をコピーする
COPY . .

# ビルドの最適化
RUN turbo prune web --docker


# インストーラーイメージを作成する
FROM base AS installer
# apk updateを実行して、libc6-compatをインストールする
RUN apk update && apk add --no-cache libc6-compat

# pnpmをインストール
RUN npm install -g pnpm

ENV PNPM_HOME=/root/.local/share/pnpm
ENV PATH="$PNPM_HOME:$PATH"

# /appを作業ディレクトリに設定する
WORKDIR /app

COPY package.json ./
COPY pnpm-workspace.yaml ./

# ビルダーイメージから依存関係の情報を含むJSONファイルをコピーする
COPY --from=builder /app/out/json/ .
RUN pnpm install

# ビルダーイメージからビルドファイルをコピーする
COPY --from=builder /app/out/full/ .

# プロジェクトのビルド
RUN pnpm turbo build

# ビルド後のディレクトリの確認
RUN echo "Checking .next directory contents:" && ls -la /app/apps/web/.next  # デバッグ用のログ出力


# ランナーイメージを作成する
FROM base AS runner
# /appを作業ディレクトリに設定する
WORKDIR /app

# ユーザーを作成する
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
# ファイルの所有者を nextjs にする
USER nextjs

# インストーラーイメージからビルドファイルをコピーする
# --chown=nextjs:nodejs でファイルの所有者を変更する
COPY --from=installer --chown=nextjs:nodejs /app/apps/web/.next/standalone ./
COPY --from=installer --chown=nextjs:nodejs /app/apps/web/.next/static ./apps/web/.next/static
COPY --from=installer --chown=nextjs:nodejs /app/apps/web/public ./apps/web/public

# デフォルトコマンドの指定
CMD node apps/web/server.js